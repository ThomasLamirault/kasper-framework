// ============================================================================
//                 KASPER - Kasper is the treasure keeper
//    www.viadeo.com - mobile.viadeo.com - api.viadeo.com - dev.viadeo.com
//
//           Viadeo Framework for effective CQRS/DDD architecture
// ============================================================================
package com.viadeo.kasper.shard;

import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class ShardedConnection implements java.sql.Connection {

    private final ShardedDataSource dataSource;
	private java.sql.Connection connection;

    // ------------------------------------------------------------------------

	public ShardedConnection(final ShardedDataSource ds, final java.sql.Connection c) {
		this.connection = c;
		this.dataSource = ds;
	}

    // ------------------------------------------------------------------------

	@Override
	public <T> T unwrap(final Class<T> iface) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public boolean isWrapperFor(final Class<?> iface) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public Statement createStatement() throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public Statement createStatement(final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType,
                                              final int resultSetConcurrency, final int resultSetHoldability)
			throws SQLException {
		// Auto-generated method stub
		return null;
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
		connection.close();
		connection = dataSource.getConnection("member", Operation.WRITE);
		return connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
	}

	@Override
	public PreparedStatement prepareStatement(final String sql) throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public PreparedStatement prepareStatement(final String sql, final String[] columnNames)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public CallableStatement prepareCall(final String sql) throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public CallableStatement prepareCall(final String sql, final int resultSetType,
                                         final int resultSetConcurrency, final int resultSetHoldability)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public CallableStatement prepareCall(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public String nativeSQL(final String sql) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setAutoCommit(final boolean autoCommit) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public boolean getAutoCommit() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void commit() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public void rollback() throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
	public void rollback(final Savepoint savepoint) throws SQLException {
        throw new UnsupportedOperationException();
	}

    @Override
    public void abort(final Executor executor) throws SQLException {
        throw new UnsupportedOperationException();
    }

    // ------------------------------------------------------------------------

	@Override
	public void close() throws SQLException {
		connection.close();
	}

	@Override
	public boolean isClosed() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public DatabaseMetaData getMetaData() throws SQLException {
		return connection.getMetaData();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setReadOnly(final boolean readOnly) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public boolean isReadOnly() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setCatalog(String catalog) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public String getCatalog() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setTransactionIsolation(int level) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public int getTransactionIsolation() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public SQLWarning getWarnings() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public void clearWarnings() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public Map<String, Class<?>> getTypeMap() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public void setTypeMap(final Map<String, Class<?>> map) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setHoldability(final int holdability) throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public int getHoldability() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public Savepoint setSavepoint() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public Savepoint setSavepoint(final String name) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void releaseSavepoint(final Savepoint savepoint) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public Clob createClob() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public Blob createBlob() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public NClob createNClob() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public SQLXML createSQLXML() throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public boolean isValid(final int timeout) throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public void setClientInfo(final String name, final String value)
			throws SQLClientInfoException {
        throw new UnsupportedOperationException();
	}

	@Override
	public void setClientInfo(final Properties properties)
			throws SQLClientInfoException {
        throw new UnsupportedOperationException();
	}

	@Override
	public String getClientInfo(final String name) throws SQLException {
		// Auto-generated method stub
		return null;
	}

	@Override
	public Properties getClientInfo() throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

	@Override
	public Array createArrayOf(final String typeName, final Object[] elements)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

	@Override
	public Struct createStruct(final String typeName, final Object[] attributes)
			throws SQLException {
        throw new UnsupportedOperationException();
	}

    // ------------------------------------------------------------------------

    @Override
    public void setSchema(final String schema) throws SQLException {
        throw new UnsupportedOperationException();
    }

    @Override
    public String getSchema() throws SQLException {
        throw new UnsupportedOperationException();
    }

    // ------------------------------------------------------------------------

    @Override
    public void setNetworkTimeout(final Executor executor, final int milliseconds) throws SQLException {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getNetworkTimeout() throws SQLException {
        throw new UnsupportedOperationException();
    }

}
